https://www.southampton.ac.uk/~drn1e09/ofertie/openvswitch_useful_commands.txt
http://www.unsam.edu.ar/cidi/actividad-7-01-open-vswitch-en-gns3/
https://blog.cyberreboot.org/building-a-software-defined-network-with-raspberry-pis-and-a-zodiac-fx-switch-97184032cdc1

sudo ovs-vsctl list-br 
sudo ovs-vsctl show
sudo ovs-vsctl get-controller s1
sudo ovs-vsctl get-controller s2



docker exec [OPTIONS] CONTAINER COMMAND [ARG...]

docker run --name ubuntu_bash --rm -i -t ubuntu bash
docker exec -it ubuntu_bash bash

**************************************************************************************************

Para nuestro caso:

sudo docker run -h c0 --name c0 -p 6633:6633 -it --rm sonatanfv/sonata-ryu-vnf /bin/bash
cd ryu
ryu-manager --ofp-tcp-listen-port 6633 ryu/app/simple_switch_13.py


sudo python topo_test.py


Aqui si dio.

****************************************************************************************************

http://www.unsam.edu.ar/cidi/actividad-7-01-open-vswitch-en-gns3/
https://blog.cyberreboot.org/building-a-software-defined-network-with-raspberry-pis-and-a-zodiac-fx-switch-97184032cdc1

ENLACES QUE PUEDEN SER UTILES:
https://github.com/tigarto/test-diarios/tree/master/junio/junio_06/test1
https://github.com/vegasbrianc/prometheus


--------------------------------------------------------------------------

sudo docker-compose up
https://www.neteye-blog.com/2018/04/how-to-monitor-docker-containers-using-cadvisor-part-1/
https://www.neteye-blog.com/2018/05/how-to-monitor-docker-containers-using-cadvisor-part-2/

https://github.com/google/cadvisor/tree/master/docs
https://github.com/google/cadvisor/blob/master/docs/storage/prometheus.md

https://blog.couchbase.com/monitoring-docker-containers-docker-stats-cadvisor-universal-control-plane/


Docker Universal Control Plane (DUCP
Sysdig Cloud
Docker-Scout
Data Dog
Ruxit
NewRelic
Logentries

https://docs.docker.com/v1.8/engine/articles/runmetrics/
http://blog.scoutapp.com/articles/2015/03/16/monitoring-docker
https://docs.logentries.com/docs/docker-logentries-container/

https://blog.codeship.com/monitoring-docker-containers/


https://axibase.com/use-cases/integrations/cadvisor/
https://vocon-it.com/2016/11/02/how-to-set-up-docker-monitoring-via-cadvisor-influxdb-and-grafana/
https://axibase.com/products/axibase-time-series-database/writing-data/docker-cadvisor/
https://medium.com/@soumyadipde/monitoring-in-docker-stacks-its-that-easy-with-prometheus-5d71c1042443
https://github.com/stefanprodan/swarmprom
https://blog.iron.io/right-sizing-with-docker-stats-and-cadvisor/


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

https://rancher.com/comparing-monitoring-options-for-docker-deployments/

------------------------------------------------------------------------------------------------------
docker stats 

sudo docker stats [CONT1 CONT2 ...]


request to: /containers/[CONTAINER_NAME]/stats 

echo -e "GET /containers/[CONTAINER_NAME]/stats HTTP/1.0\r\n" | nc -U /var/run/docker.sock

Se obtiene:
docker stats display a live stream of the following container(s) resource usage statistics:

CPU % usage
Memory usage, limit, % usage
Network i/o
Disk i/o



Enlace:
https://github.com/moby/moby/issues/22618
https://kylewbanks.com/blog/docker-stats-memory-cpu-in-json-format
https://github.com/KyleBanks/dockerstats

Conclusiones: Con el ultimo caso podriamos tener una metrica para los contenedores.

-------------------------------------------------------------------------------------------------------

Develop with Docker Engine SDKs and API

https://docs.docker.com/develop/sdk/

Puede ser util para estadisticas.
https://docs.docker.com/samples/

Usando python, se puede hacer uso de un remote API para la obtencion de resultados.

-------------------------------------------------------------------------------------------------------
https://docs.logentries.com/docs/docker-logentries-container/






-------------------------------------------------------------------------------------------------------
Prometheus

-------------------------------------------------------------------------------------------------------

https://rancher.com/docker-monitoring-continued-prometheus-and-sysdig/

https://github.com/puppetlabs/puppetlabs-docker_ucp
https://dzone.com/articles/monitoring-docker-containers-docker-stats-cadvisor (Ver)
https://github.com/veggiemonk/awesome-docker
https://www.katacoda.com/
-------------------------------------------------------------------------------------
https://dzone.com/articles/monitoring-docker-containers-docker-stats-cadvisor (Seguir este tutorial ahora).

********************************************************************************************************************
********************************************************************************************************************

Fecha: 21/12/2018

https://dzone.com/refcardz/intro-to-docker-monitoring?chapter=6

Modificar IP del archivo de configuración de Prometheus:
192.168.1.6 


Arrancar el prometheus:
sudo docker-compose up


sudo docker run -h c0 --name c0 -p 6633:6633 -it --rm sonatanfv/sonata-ryu-vnf /bin/bash
cd ryu
ryu-manager --ofp-tcp-listen-port 6633 ryu/app/simple_switch_13.py 

sudo python topo_test.py 

https://labs.bawi.io/monitoring-containers-with-prometheus-ffde286c17f7


A continuación se colocan las medidas con cAdvisor:
https://github.com/google/cadvisor/blob/master/docs/storage/prometheus.md
https://prometheus.io/docs/guides/cadvisor/
https://prometheus.io/docs/practices/naming/

Metricas:
container_cpu_usage_seconds_total{cpu="cpu03",id="/docker/fb4ad0e4d7b512287a2f9f1fb6357ab32ff5cdcc44ceef01b27514f5de0257ba",image="sonatanfv/sonata-ryu-vnf",instance="192.168.1.6:8090",job="cadvisor",name="c0"}

container_cpu_usage_seconds_total{cpu="cpu03",instance="192.168.1.6:8090",job="cadvisor",name="c0"}

container_cpu_usage_seconds_total{cpu="cpu00",id="/docker/fb4ad0e4d7b512287a2f9f1fb6357ab32ff5cdcc44ceef01b27514f5de0257ba",image="sonatanfv/sonata-ryu-vnf",instance="192.168.1.6:8090",job="cadvisor",name="c0"}

container_network_receive_bytes_total{interface="h1-eth0",job="cadvisor",name="mn.h1"}
container_network_receive_bytes_total{interface="h2-eth0",job="cadvisor",name="mn.h2"}
container_network_receive_bytes_total{interface="h3-eth0",job="cadvisor",name="mn.h3"}
container_network_receive_bytes_total{interface="h4-eth0",job="cadvisor",name="mn.h4"}

Aplicando funciones:


rate(container_network_receive_bytes_total{interface="h1-eth0",job="cadvisor",name="mn.h1"}[10s])
rate(container_network_receive_bytes_total{interface="h2-eth0",job="cadvisor",name="mn.h2"}[10s])
rate(container_network_receive_bytes_total{interface="h3-eth0",job="cadvisor",name="mn.h3"}[10s])
rate(container_network_receive_bytes_total{interface="h4-eth0",job="cadvisor",name="mn.h4"}[10s])

CPU

container_memory_usage_bytes{name="mn.h1"}
container_memory_usage_bytes{name="mn.h2"}
container_memory_usage_bytes{name="mn.h3"}
container_memory_usage_bytes{name="mn.h4"}

container_memory_usage_bytes{name="cAdvisor"}

user: admin
pass: admin


https://grafana.com/dashboards/893

-------------------------------------------------------------

Se instalo:

pip install requests-unixsocket


https://www.correlsense.com/automating-docker-container-monitoring/


sudo pip2 install check_docker (Error)

sudo pip3 install check_docker
sudo pip3.4 install check_docker


https://pypi.org/project/check_docker/
https://dzone.com/refcardz/intro-to-docker-monitoring?chapter=1
	
---------------------------------------------------------------------------------------

https://github.com/faucetsdn/faucet
https://faucet-sdn.blogspot.com/2018/01/flow-table-monitoring-in-prometheus.html
https://networkshop.aarnet.edu.au/content/uploads/2017/06/SDN-Brad-Cowie.pdf


https://blog.sflow.com/2018/10/ryu-measurement-based-control.html

Ver: importante --> https://sdn-security.blogspot.com/2018/03/ryu-controller-network-security.html

Vamos a trabajar con Fauset: https://www.ausnog.net/sites/default/files/ausnog-2018/presentations/1.8_Richard_Nelson_AusNOG2018.pdf

https://www.ausnog.net/sites/default/files/ausnog-2018/presentations/1.8_Richard_Nelson_AusNOG2018.pdf

https://thenewstack.io/sdn-series-part-iv-ryu-a-rich-featured-open-source-sdn-controller-supported-by-ntt-labs/


https://github.com/leannetworking/ovs-exporter
https://blog.sflow.com/2015/01/open-vswitch-performance-monitoring.html

https://blog.sflow.com/2018/03/prometheus-and-grafana.html
https://github.com/cloudflare/goflow


https://prometheus.io/docs/instrumenting/exporters/

https://sflow.org/sFlowOverview.pdf
https://nlnog.net/static/nlnogcamp2018/NLNOG_Camp_2018_Streaming_telemetry_Joris_Arista.pdf
https://www.netways.de/fileadmin/images/Events_Trainings/Events/OSMC/2015/Slides_2015/Prometheus_a_next-gen_monitoring_system-Fabian_Reinartz.pdf
https://media.readthedocs.org/pdf/faucet/latest/faucet.pdf


